import os
import hashlib
import re

def calculate_file_hash(file_path):
    """Calculate the SHA-256 hash of a file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_signature(file_path, malware_signatures):
    """Check if the file's hash matches known malware signatures."""
    file_hash = calculate_file_hash(file_path)
    return file_hash in malware_signatures

def scan_for_suspicious_patterns(file_path, suspicious_patterns):
    """Scan the file content for suspicious patterns."""
    with open(file_path, "r", errors='ignore') as f:
        content = f.read()
        for pattern in suspicious_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                return True
    return False

def scan_directory(directory, malware_signatures, suspicious_patterns):
    """Scan a directory for potential malware."""
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                if check_signature(file_path, malware_signatures):
                    print(f"WARNING: {file_path} matches a known malware signature!")
                elif scan_for_suspicious_patterns(file_path, suspicious_patterns):
                    print(f"SUSPICIOUS: {file_path} contains suspicious patterns.")
                else:
                    print(f"CLEAN: {file_path}")
            except Exception as e:
                print(f"ERROR: Could not scan {file_path}. Reason: {str(e)}")

# Example usage
malware_signatures = {
    "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",  # Example hash
    # Add more known malware hashes here
}

suspicious_patterns = [
    r"(?i)virus",
    r"(?i)malware",
    r"(?i)hack",
    r"(?i)exploit",
    # Add more suspicious patterns here
]

scan_directory("/path/to/scan", malware_signatures, suspicious_patterns)